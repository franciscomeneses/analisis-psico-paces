# Estos valores son coordenadas para pegar los valores de las cargas.  No alteran los resultados
library(draw) #para hacer rectangulo de fit
adj_y <- 0.6
adj_x <- 0.2
#drawBox(x = 3.5, y = 1.2-adj_y, width = 7.5, height = 2,fillColor = "grey",opacity = 0)# marca espacio
#drawBox(x = 3.5, y = 1.4-adj_y, width = 5.5, height = 1,fillColor = "grey",opacity = 0.5) # crea rectangulo
#pegar texto fit en rectangulo
size <- 10
drawText(x = 3.5+adj_x, y = -1, text = paste0("Estimator: DWLS", ", N= ",nobs(fit2),"Model fit: ", "$chi^2$","(",fm03[2,],")=",fm03[1,],"$p$=",fm03[4,],"; CFI=",fm03[3,],"; RMSEA=",fm03[4,]),family = "serif",size = size)
#drawText(x = 2.3+adj_x, y = 1.60-adj_y, text = paste0("Model fit: ", "$chi^2$","(",fm03[2,],")=",fm03[1,],"***","; CFI=",fm03[3,],"; RMSEA=",fm03[4,]),family = "serif",size = size)
#drawText(x = 1.0+adj_x, y = 1.70-adj_y, text = paste0("***p<0.001"),family = "serif",size = size)
#guardar en png
drawExport("meas03.png",units = "cm",width = 18,height = 15,ppi = 300)
library(sjPlot)
library(dplyr)
library(lavaan)
library(semPlot)
library(stargazer)
library(corrplot)
library(psych)
library(knitr)
library(kableExtra)
library(rvest)
library(sjlabelled)
library(ggplot2)
#pacman::p_load()
nodeNames <-c("Perception effort","Perception talent","Perception rich family","Perception contacts",
"Preference effort","Preference talent","Preference rich family","Preference contacts",
"Perception \n meritocratic","Perception \n non meritocratic","Preference \n meritocratic","Preference \n non meritocratic")
# graphics.off()
fm03<- data.frame(v1=fitmeasures(fit2, output ="matrix")[c("chisq","df","cfi","rmsea","pvalue"),])
fm03 <- round(fm03,3)
par(mai = c(2,2,2,2)) # Set the margin on all sides to 2
par(mar = c(5, 5, 5, 5)) # Set the margin on all sides to 6
layout(matrix(c(1, # semPlot
1, # semPlot
1,
1,
1,
2),# ajuste
nrow=6,
byrow=TRUE))
#layout.show(n = 2)
semPaths(
fit2 ,
whatLabels = "std", # Indica si aparecen los valores
#what = "mod",
label.cex = 1.3, # Tamaño de las etiquetas dentro de los nodos.
edge.label.cex =  1.8, #  0.8 Tamaño de los valores estimados.
residuals = T,
optimizeLatRes =F,
edge.color = "black",
style = "lisrel",
nCharNodes = 0,
curvePivot = F,
curve = 2.5,
rotation = 4,
layout = "tree2",
cardinal = "lat cov",
legend.cex = 0.6, # 0.6
label.cex = 1,
label.font = 6,
edge.label.font = 14,
asize = 3,
edge.width = 1.2,
sizeMan = 8,# largo manifest
sizeMan2= 8,# alto manifest
sizeLat = 5.5, # largo de los circulos
sizeLat2 = 20, # alto de los circulos
residScale = 10,
width = 21.5, # 17
height = 10, # 10
# nodeNames = nodeNames,
intercepts = F,
reorder = T,
thresholds = F,
fixedStyle =1,
node.height = 1,
node.width = 4,
label.scale = F,
shapeMan = "rectangle",
shapeLat = "ellipse",
# nodeLabels = nodeNames,
details = T)
ld<- standardizedsolution(fit2) %>% select(lhs,op,rhs,est.std) %>% filter(op=="=~")
ld$est.std<- sprintf("%.2f", ld$est.std)
#pegar cargas factoriales al plot
# Estos valores son coordenadas para pegar los valores de las cargas.  No alteran los resultados
library(draw) #para hacer rectangulo de fit
adj_y <- 0.6
adj_x <- 0.2
#drawBox(x = 3.5, y = 1.2-adj_y, width = 7.5, height = 2,fillColor = "grey",opacity = 0)# marca espacio
#drawBox(x = 3.5, y = 1.4-adj_y, width = 5.5, height = 1,fillColor = "grey",opacity = 0.5) # crea rectangulo
#pegar texto fit en rectangulo
size <- 10
drawText(x = 3.5+adj_x, y = 2, text = paste0("Estimator: DWLS", ", N= ",nobs(fit2),"Model fit: ", "$chi^2$","(",fm03[2,],")=",fm03[1,],"$p$=",fm03[4,],"; CFI=",fm03[3,],"; RMSEA=",fm03[4,]),family = "serif",size = size)
#drawText(x = 2.3+adj_x, y = 1.60-adj_y, text = paste0("Model fit: ", "$chi^2$","(",fm03[2,],")=",fm03[1,],"***","; CFI=",fm03[3,],"; RMSEA=",fm03[4,]),family = "serif",size = size)
#drawText(x = 1.0+adj_x, y = 1.70-adj_y, text = paste0("***p<0.001"),family = "serif",size = size)
#guardar en png
drawExport("meas03.png",units = "cm",width = 18,height = 15,ppi = 300)
library(sjPlot)
library(dplyr)
library(lavaan)
library(semPlot)
library(stargazer)
library(corrplot)
library(psych)
library(knitr)
library(kableExtra)
library(rvest)
library(sjlabelled)
library(ggplot2)
#pacman::p_load()
nodeNames <-c("Perception effort","Perception talent","Perception rich family","Perception contacts",
"Preference effort","Preference talent","Preference rich family","Preference contacts",
"Perception \n meritocratic","Perception \n non meritocratic","Preference \n meritocratic","Preference \n non meritocratic")
# graphics.off()
fm03<- data.frame(v1=fitmeasures(fit2, output ="matrix")[c("chisq","df","cfi","rmsea","pvalue"),])
fm03 <- round(fm03,3)
par(mai = c(2,2,2,2)) # Set the margin on all sides to 2
par(mar = c(5, 5, 5, 5)) # Set the margin on all sides to 6
layout(matrix(c(1, # semPlot
1, # semPlot
1,
1,
1,
2),# ajuste
nrow=6,
byrow=TRUE))
#layout.show(n = 2)
semPaths(
fit2 ,
whatLabels = "std", # Indica si aparecen los valores
#what = "mod",
label.cex = 1.3, # Tamaño de las etiquetas dentro de los nodos.
edge.label.cex =  1.8, #  0.8 Tamaño de los valores estimados.
residuals = T,
optimizeLatRes =F,
edge.color = "black",
style = "lisrel",
nCharNodes = 0,
curvePivot = F,
curve = 2.5,
rotation = 4,
layout = "tree2",
cardinal = "lat cov",
legend.cex = 0.6, # 0.6
label.cex = 1,
label.font = 6,
edge.label.font = 14,
asize = 3,
edge.width = 1.2,
sizeMan = 8,# largo manifest
sizeMan2= 8,# alto manifest
sizeLat = 5.5, # largo de los circulos
sizeLat2 = 20, # alto de los circulos
residScale = 10,
width = 21.5, # 17
height = 10, # 10
# nodeNames = nodeNames,
intercepts = F,
reorder = T,
thresholds = F,
fixedStyle =1,
node.height = 1,
node.width = 4,
label.scale = F,
shapeMan = "rectangle",
shapeLat = "ellipse",
# nodeLabels = nodeNames,
details = T)
ld<- standardizedsolution(fit2) %>% select(lhs,op,rhs,est.std) %>% filter(op=="=~")
ld$est.std<- sprintf("%.2f", ld$est.std)
#pegar cargas factoriales al plot
# Estos valores son coordenadas para pegar los valores de las cargas.  No alteran los resultados
library(draw) #para hacer rectangulo de fit
adj_y <- 0.6
adj_x <- 0.2
#drawBox(x = 3.5, y = 1.2-adj_y, width = 7.5, height = 2,fillColor = "grey",opacity = 0)# marca espacio
#drawBox(x = 3.5, y = 1.4-adj_y, width = 5.5, height = 1,fillColor = "grey",opacity = 0.5) # crea rectangulo
#pegar texto fit en rectangulo
size <- 10
drawText(x = 3.5+adj_x, y = 4, text = paste0("Estimator: DWLS", ", N= ",nobs(fit2),"Model fit: ", "$chi^2$","(",fm03[2,],")=",fm03[1,],"$p$=",fm03[4,],"; CFI=",fm03[3,],"; RMSEA=",fm03[4,]),family = "serif",size = size)
#drawText(x = 2.3+adj_x, y = 1.60-adj_y, text = paste0("Model fit: ", "$chi^2$","(",fm03[2,],")=",fm03[1,],"***","; CFI=",fm03[3,],"; RMSEA=",fm03[4,]),family = "serif",size = size)
#drawText(x = 1.0+adj_x, y = 1.70-adj_y, text = paste0("***p<0.001"),family = "serif",size = size)
#guardar en png
drawExport("meas03.png",units = "cm",width = 18,height = 15,ppi = 300)
library(sjPlot)
library(dplyr)
library(lavaan)
library(semPlot)
library(stargazer)
library(corrplot)
library(psych)
library(knitr)
library(kableExtra)
library(rvest)
library(sjlabelled)
library(ggplot2)
#pacman::p_load()
nodeNames <-c("Perception effort","Perception talent","Perception rich family","Perception contacts",
"Preference effort","Preference talent","Preference rich family","Preference contacts",
"Perception \n meritocratic","Perception \n non meritocratic","Preference \n meritocratic","Preference \n non meritocratic")
# graphics.off()
fm03<- data.frame(v1=fitmeasures(fit2, output ="matrix")[c("chisq","df","cfi","rmsea","pvalue"),])
fm03 <- round(fm03,3)
par(mai = c(2,2,2,2)) # Set the margin on all sides to 2
par(mar = c(5, 5, 5, 5)) # Set the margin on all sides to 6
layout(matrix(c(1, # semPlot
1, # semPlot
1,
1,
1,
2),# ajuste
nrow=6,
byrow=TRUE))
#layout.show(n = 2)
semPaths(
fit2 ,
whatLabels = "std", # Indica si aparecen los valores
#what = "mod",
label.cex = 1.3, # Tamaño de las etiquetas dentro de los nodos.
edge.label.cex =  1.8, #  0.8 Tamaño de los valores estimados.
residuals = T,
optimizeLatRes =F,
edge.color = "black",
style = "lisrel",
nCharNodes = 0,
curvePivot = F,
curve = 2.5,
rotation = 4,
layout = "tree2",
cardinal = "lat cov",
legend.cex = 0.6, # 0.6
label.cex = 1,
label.font = 6,
edge.label.font = 14,
asize = 3,
edge.width = 1.2,
sizeMan = 8,# largo manifest
sizeMan2= 8,# alto manifest
sizeLat = 5.5, # largo de los circulos
sizeLat2 = 20, # alto de los circulos
residScale = 10,
width = 21.5, # 17
height = 10, # 10
# nodeNames = nodeNames,
intercepts = F,
reorder = T,
thresholds = F,
fixedStyle =1,
node.height = 1,
node.width = 4,
label.scale = F,
shapeMan = "rectangle",
shapeLat = "ellipse",
# nodeLabels = nodeNames,
details = T)
ld<- standardizedsolution(fit2) %>% select(lhs,op,rhs,est.std) %>% filter(op=="=~")
ld$est.std<- sprintf("%.2f", ld$est.std)
#pegar cargas factoriales al plot
# Estos valores son coordenadas para pegar los valores de las cargas.  No alteran los resultados
library(draw) #para hacer rectangulo de fit
adj_y <- 0.6
adj_x <- 0.2
#drawBox(x = 3.5, y = 1.2-adj_y, width = 7.5, height = 2,fillColor = "grey",opacity = 0)# marca espacio
#drawBox(x = 3.5, y = 1.4-adj_y, width = 5.5, height = 1,fillColor = "grey",opacity = 0.5) # crea rectangulo
#pegar texto fit en rectangulo
size <- 10
drawText(x = 3.5+adj_x, y = 4.5, text = paste0("Estimator: DWLS", ", N= ",nobs(fit2),"Model fit: ", "$chi^2$","(",fm03[2,],")=",fm03[1,],"$p$=",fm03[4,],"; CFI=",fm03[3,],"; RMSEA=",fm03[4,]),family = "serif",size = size)
#drawText(x = 2.3+adj_x, y = 1.60-adj_y, text = paste0("Model fit: ", "$chi^2$","(",fm03[2,],")=",fm03[1,],"***","; CFI=",fm03[3,],"; RMSEA=",fm03[4,]),family = "serif",size = size)
#drawText(x = 1.0+adj_x, y = 1.70-adj_y, text = paste0("***p<0.001"),family = "serif",size = size)
#guardar en png
drawExport("meas03.png",units = "cm",width = 18,height = 15,ppi = 300)
library(sjPlot)
library(dplyr)
library(lavaan)
library(semPlot)
library(stargazer)
library(corrplot)
library(psych)
library(knitr)
library(kableExtra)
library(rvest)
library(sjlabelled)
library(ggplot2)
#pacman::p_load()
nodeNames <-c("Perception effort","Perception talent","Perception rich family","Perception contacts",
"Preference effort","Preference talent","Preference rich family","Preference contacts",
"Perception \n meritocratic","Perception \n non meritocratic","Preference \n meritocratic","Preference \n non meritocratic")
# graphics.off()
fm03<- data.frame(v1=fitmeasures(fit2, output ="matrix")[c("chisq","df","cfi","rmsea","pvalue"),])
fm03 <- round(fm03,3)
par(mai = c(2,2,2,2)) # Set the margin on all sides to 2
par(mar = c(5, 5, 5, 5)) # Set the margin on all sides to 6
layout(matrix(c(1, # semPlot
1, # semPlot
1,
1,
1,
2),# ajuste
nrow=6,
byrow=TRUE))
#layout.show(n = 2)
semPaths(
fit2 ,
whatLabels = "std", # Indica si aparecen los valores
#what = "mod",
label.cex = 1.3, # Tamaño de las etiquetas dentro de los nodos.
edge.label.cex =  1.8, #  0.8 Tamaño de los valores estimados.
residuals = T,
optimizeLatRes =F,
edge.color = "black",
style = "lisrel",
nCharNodes = 0,
curvePivot = F,
curve = 2.5,
rotation = 4,
layout = "tree2",
cardinal = "lat cov",
legend.cex = 0.6, # 0.6
label.cex = 1,
label.font = 6,
edge.label.font = 14,
asize = 3,
edge.width = 1.2,
sizeMan = 8,# largo manifest
sizeMan2= 8,# alto manifest
sizeLat = 5.5, # largo de los circulos
sizeLat2 = 20, # alto de los circulos
residScale = 10,
width = 21.5, # 17
height = 10, # 10
# nodeNames = nodeNames,
intercepts = F,
reorder = T,
thresholds = F,
fixedStyle =1,
node.height = 1,
node.width = 4,
label.scale = F,
shapeMan = "rectangle",
shapeLat = "ellipse",
# nodeLabels = nodeNames,
details = T)
ld<- standardizedsolution(fit2) %>% select(lhs,op,rhs,est.std) %>% filter(op=="=~")
ld$est.std<- sprintf("%.2f", ld$est.std)
#pegar cargas factoriales al plot
# Estos valores son coordenadas para pegar los valores de las cargas.  No alteran los resultados
library(draw) #para hacer rectangulo de fit
adj_y <- 0.6
adj_x <- 0.2
#drawBox(x = 3.5, y = 1.2-adj_y, width = 7.5, height = 2,fillColor = "grey",opacity = 0)# marca espacio
#drawBox(x = 3.5, y = 1.4-adj_y, width = 5.5, height = 1,fillColor = "grey",opacity = 0.5) # crea rectangulo
#pegar texto fit en rectangulo
size <- 10
drawText(x = 3.5+adj_x, y = 4.2, text = paste0("Estimator: DWLS", ", N= ",nobs(fit2),"Model fit: ", "$chi^2$","(",fm03[2,],")=",fm03[1,],"$p$=",fm03[4,],"; CFI=",fm03[3,],"; RMSEA=",fm03[4,]),family = "serif",size = size)
#drawText(x = 2.3+adj_x, y = 1.60-adj_y, text = paste0("Model fit: ", "$chi^2$","(",fm03[2,],")=",fm03[1,],"***","; CFI=",fm03[3,],"; RMSEA=",fm03[4,]),family = "serif",size = size)
#drawText(x = 1.0+adj_x, y = 1.70-adj_y, text = paste0("***p<0.001"),family = "serif",size = size)
#guardar en png
drawExport("meas03.png",units = "cm",width = 18,height = 15,ppi = 300)
sjPlot::plot_likert(est_proc_ddgenero,
axis.labels   = items,
legend.labels = labels,
legend.pos = "bottom",
#cat.neutral   = , # identifica a indiferentes
geom.colors   = c("#9ECAE1", "#6BAED6", "#4292C6",
"#2171B5"), # colorbrewer2.org
sort.frq      = "neg.asc", # sort descending)
title         = "Creencias y opiniones políticas, tolerancia etnicos",
intercept.line.color = "white", # vertical middle
expand.grid   = F, # no inner margins in plot
show.n        = FALSE, # hide N's in axis labels
grid.range    = 1.8,
geom.size = 0.6, values = "sum.outside")
sjPlot::view_df(est_proc_ddgenero, show.type = T, show.frq = T, show.prc =T) # Cambiar por dfsummary
factanal(est_proc_ddgenero, factors = 3, rotation = "none")
# Exploratorio
factanal(est_proc_ddgenero, factors = 3, rotation = "none")
# A E  y G tiene cargas cruzadas problematicas (>.48), b h cargas cruzadas menores a 310
#-----------------------------------------------------------------------------------------##
# AFC: Modelo con todos los indicadores
cfa_1 <- 'ig_gen =~ P18A + P18E + P18G
ig_pub =~ P18C + P18D + P18F
ig_priv =~ P18B + P18H + P18I'
fit1 <- cfa(cfa_1, data=est_proc_ddgenero, estimator="DWLS", ordered = T)
summary(fit1, fit.measures=TRUE)
#modificationindices(fit1)
semPaths(fit1, what = "stand")
# AFC: Modelo con indicadores reducidos
cfa_2 <- 'ig_gen =~ P18E + P18G
ig_pub =~ P18C + P18D
ig_priv =~ P18B + P18H'
fit2 <- cfa(cfa_2, data=est_proc_ddgenero, estimator="DWLS", ordered = T)
summary(fit2, fit.measures=TRUE)
semPaths(fit2, what = "stand")
modificationindices(fit2)
# Exploratorio
factanal(est_proc_ddgenero, factors = 3, rotation = "none")
# A E  y G tiene cargas cruzadas problematicas (>.48), b h cargas cruzadas menores a 310
#-----------------------------------------------------------------------------------------##
# AFC: Modelo con todos los indicadores
cfa_1 <- 'ig_gen =~ P18A + P18E + P18G
ig_pub =~ P18C + P18D + P18F
ig_priv =~ P18B + P18H + P18I'
fit1 <- cfa(cfa_1, data=est_proc_ddgenero, estimator="DWLS", ordered = T)
summary(fit1, fit.measures=TRUE)
#modificationindices(fit1)
semPaths(fit1, what = "stand")
# AFC: Modelo con indicadores reducidos
cfa_2 <- 'ig_gen =~ P18E + P18G
ig_pub =~ P18C + P18D
ig_priv =~ P18B + P18H'
fit2 <- cfa(cfa_2, data=est_proc_ddgenero, estimator="DWLS", ordered = T)
summary(fit2, fit.measures=TRUE)
semPaths(fit2, what = "stand")
modificationindices(fit2)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = F,warning = F)
# Igualdad de derechos para inmigrantes
load(file="../input/data/original.RData")
pacman::p_load(dplyr, sjmisc, car, sjlabelled, stargazer, SciViews, summarytools, misty,sjPlot,PerformanceAnalytics,ggplot2,lavaan,stats, semPlot)
# Seleccionar y renombrar variables de la base de datos de estudiantes.
est_proc_inmigrantes <- est  %>% dplyr::select(starts_with("P19"))
est_proc_inmigrantes <- set_na(est_proc_inmigrantes, na = c(5,9), drop.levels = TRUE, as.tag = FALSE) # Transformar a NA
# Descriptivos
sjPlot::view_df(est_proc_inmigrantes, show.type = T, show.frq = T) # Cambiar por dfsummary
# Igualdad de derechos para inmigrantes
load(file="../input/data/original.RData")
pacman::p_load(dplyr, sjmisc, car, sjlabelled, stargazer, SciViews, summarytools, misty,sjPlot,PerformanceAnalytics,ggplot2,lavaan,stats, semPlot)
# Seleccionar y renombrar variables de la base de datos de estudiantes.
est_proc_inmigrantes <- est  %>% dplyr::select(starts_with("P19"))
est_proc_inmigrantes <- set_na(est_proc_inmigrantes, na = c(5,9), drop.levels = TRUE, as.tag = FALSE) # Transformar a NA
#-----------------------------------------------------------------------------------------##
# Exploratorio
factanal(est_proc_inmigrantes, factors = 1, rotation = "none")
# Analisis factorial
HS.model1 <- ' tol_etnia  =~ P16A + P16B + P16C + P16D+  P16E'
fit1 <- cfa(HS.model1, data=est_proc_tolet, estimator="DWLS", ordered = T)
summary(fit1, fit.measures=TRUE)
HS.model2 <- ' tol_etnia  =~ P16A + P16B + P16C +  P16D'
#HS.model2 <- ' tol_etnia  =~ P16A + P16B + P16C +  P16E'
fit2 <- cfa(HS.model2, data=est_proc_tolet, estimator="DWLS", ordered=T)
summary(fit2, fit.measures=TRUE)
HS.model2 <- ' tol_etnia  =~ P16A  + P16C +  P16D'
fit2 <- cfa(HS.model2, data=est_proc_tolet, estimator="DWLS", ordered=T)
summary(fit2, fit.measures=TRUE)
# Customize object
sum_fit1$mod <- c("Todas las variables","Bateria recortada 1","Bateria recortada 1")
# Modelo general
HS.model1 <- ' tol_etnia  =~ P16A + P16B + P16C + P16D+  P16E'
fit1 <- cfa(HS.model1, data=est_proc_tolet, estimator="DWLS", ordered = T)
summary(fit1, fit.measures=TRUE)
# Modelo reducido 1
HS.model2 <- ' tol_etnia  =~ P16A  + P16C +  P16D'
fit2 <- cfa(HS.model2, data=est_proc_tolet, estimator="DWLS", ordered=T)
summary(fit2, fit.measures=TRUE)
# Modelo reducido 2
HS.model3 <- ' tol_etnia  =~ P16A + P16B + P16C +  P16E'
fit3 <- cfa(HS.model3, data=est_proc_tolet, estimator="DWLS", ordered=T)
summary(fit3, fit.measures=TRUE)
#-----------------------------------------------------------------------------------------##
# Crear tabla para comprarar afc
pacman::p_load(dplyr, kableExtra, knitr)
# extract fit indices from models and add to table
sum_fit1<- dplyr::bind_rows(fitmeasures(fit1)[c("chisq","df","pvalue","cfi","tli","rmsea","srmr")],
fitmeasures(fit2)[c("chisq","df","pvalue","cfi","tli","rmsea","srmr")],fitmeasures(fit3)[c("chisq","df","pvalue","cfi","tli","rmsea","srmr")])
# Customize object
sum_fit1$mod <- c("Todas las variables","Bateria recortada 1","Bateria recortada 2")
sum_fit1$nobs <- c(nobs(fit1),nobs(fit2))
#-----------------------------------------------------------------------------------------##
# Crear tabla para comprarar afc
pacman::p_load(dplyr, kableExtra, knitr)
# extract fit indices from models and add to table
sum_fit1<- dplyr::bind_rows(fitmeasures(fit1)[c("chisq","df","pvalue","cfi","tli","rmsea","srmr")],
fitmeasures(fit2)[c("chisq","df","pvalue","cfi","tli","rmsea","srmr")],fitmeasures(fit3)[c("chisq","df","pvalue","cfi","tli","rmsea","srmr")])
# Customize object
sum_fit1$mod <- c("Todas las variables","Bateria recortada 1","Bateria recortada 2")
sum_fit1$nobs <- c(nobs(fit1),nobs(fit2),nobs(fit3))
sum_fit1$est <- c("DWLS","DWLS","DWLS")
sum_fit1$df<-c(sum_fit1$chisq/sum_fit1$df)
sum_fit1 <- dplyr::select(sum_fit1,mod,nobs,est,everything())
colnames <- c("Utilizando variables como","$N$","Estimador","$\\chi^2$","$\\chi2/df","p-value","CFI","TLI","RMSEA","SRMR")
# Create table
table_cfa_fits1 <-kable(sum_fit1, format="html", digits=3, booktabs=T, col.names=colnames,  caption = "Comparación entre modelos", escape = FALSE) %>% kable_styling(full_width = F, font_size = 10)
table_cfa_fits1
fm03[1,]
fm03
drawText(x = 3, y = 5.5, text = paste0("Estimator: DWLS", ", N= ",nobs(fit2);, "chi^2(df) =",fm03[2,],"(",fm03[1,],")","$p$=",fm03[4,],"; CFI=",fm03[3,],"; RMSEA=",fm03[4,]),family = "serif",size = size)
# Exploratorio
#factanal(est_proc_ddgenero, factors = 3, rotation = "none")
# A E  y G tiene cargas cruzadas problematicas (>.48), b h cargas cruzadas menores a 310
#-----------------------------------------------------------------------------------------##
# AFC: Modelo con todos los indicadores
cfa_1 <- 'ig_gen =~ P18A + P18E + P18G
ig_pub =~ P18C + P18D + P18F
ig_priv =~ P18B + P18H + P18I'
fit1 <- cfa(cfa_1, data=est_proc_ddgenero, estimator="DWLS", ordered = T)
summary(fit1, fit.measures=TRUE)
#modificationindices(fit1)
#semPaths(fit1, what = "stand")
# AFC: Modelo con indicadores reducidos
cfa_2 <- 'ig_gen =~ P18E + P18G
ig_pub =~ P18C + P18D
ig_priv =~ P18B + P18H'
fit2 <- cfa(cfa_2, data=est_proc_ddgenero, estimator="DWLS", ordered = T)
summary(fit2, fit.measures=TRUE)
#semPaths(fit2, what = "stand")
#modificationindices(fit2)
cfa_3 <- 'ig_pub =~ P18C + P18D
ig_priv =~ P18B + P18H'
fit3 <- cfa(cfa_3, data=est_proc_ddgenero, estimator="DWLS", ordered = T)
summary(fit3, fit.measures=TRUE)
